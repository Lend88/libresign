# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .. import util


class DocumentInfoPageEntry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, height: float=None, width: float=None):  # noqa: E501
        """DocumentInfoPageEntry - a model defined in Swagger

        :param height: The height of this DocumentInfoPageEntry.  # noqa: E501
        :type height: float
        :param width: The width of this DocumentInfoPageEntry.  # noqa: E501
        :type width: float
        """
        self.swagger_types = {
            'height': float,
            'width': float
        }

        self.attribute_map = {
            'height': 'height',
            'width': 'width'
        }

        self._height = height
        self._width = width

    @classmethod
    def from_dict(cls, dikt) -> 'DocumentInfoPageEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DocumentInfoPageEntry of this DocumentInfoPageEntry.  # noqa: E501
        :rtype: DocumentInfoPageEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self) -> float:
        """Gets the height of this DocumentInfoPageEntry.

        The height of the page, in PDF units.  # noqa: E501

        :return: The height of this DocumentInfoPageEntry.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height: float):
        """Sets the height of this DocumentInfoPageEntry.

        The height of the page, in PDF units.  # noqa: E501

        :param height: The height of this DocumentInfoPageEntry.
        :type height: float
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def width(self) -> float:
        """Gets the width of this DocumentInfoPageEntry.

        The width of the page, in PDF units.  # noqa: E501

        :return: The width of this DocumentInfoPageEntry.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width: float):
        """Sets the width of this DocumentInfoPageEntry.

        The width of the page, in PDF units.  # noqa: E501

        :param width: The width of this DocumentInfoPageEntry.
        :type width: float
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501

        self._width = width
