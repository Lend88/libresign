# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .document_info_field_entry_rect import DocumentInfoFieldEntryRect  # noqa: F401,E501
from .. import util


class DocumentInfoFieldEntry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, rect: DocumentInfoFieldEntryRect=None, page: float=None):  # noqa: E501
        """DocumentInfoFieldEntry - a model defined in Swagger

        :param id: The id of this DocumentInfoFieldEntry.  # noqa: E501
        :type id: str
        :param name: The name of this DocumentInfoFieldEntry.  # noqa: E501
        :type name: str
        :param rect: The rect of this DocumentInfoFieldEntry.  # noqa: E501
        :type rect: DocumentInfoFieldEntryRect
        :param page: The page of this DocumentInfoFieldEntry.  # noqa: E501
        :type page: float
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'rect': DocumentInfoFieldEntryRect,
            'page': float
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'rect': 'rect',
            'page': 'page'
        }

        self._id = id
        self._name = name
        self._rect = rect
        self._page = page

    @classmethod
    def from_dict(cls, dikt) -> 'DocumentInfoFieldEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DocumentInfoFieldEntry of this DocumentInfoFieldEntry.  # noqa: E501
        :rtype: DocumentInfoFieldEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this DocumentInfoFieldEntry.

        The field ID  # noqa: E501

        :return: The id of this DocumentInfoFieldEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DocumentInfoFieldEntry.

        The field ID  # noqa: E501

        :param id: The id of this DocumentInfoFieldEntry.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this DocumentInfoFieldEntry.

        The name of the field.  # noqa: E501

        :return: The name of this DocumentInfoFieldEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DocumentInfoFieldEntry.

        The name of the field.  # noqa: E501

        :param name: The name of this DocumentInfoFieldEntry.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def rect(self) -> DocumentInfoFieldEntryRect:
        """Gets the rect of this DocumentInfoFieldEntry.


        :return: The rect of this DocumentInfoFieldEntry.
        :rtype: DocumentInfoFieldEntryRect
        """
        return self._rect

    @rect.setter
    def rect(self, rect: DocumentInfoFieldEntryRect):
        """Sets the rect of this DocumentInfoFieldEntry.


        :param rect: The rect of this DocumentInfoFieldEntry.
        :type rect: DocumentInfoFieldEntryRect
        """
        if rect is None:
            raise ValueError("Invalid value for `rect`, must not be `None`")  # noqa: E501

        self._rect = rect

    @property
    def page(self) -> float:
        """Gets the page of this DocumentInfoFieldEntry.

        The page that contains the field. Indices start at 0.  # noqa: E501

        :return: The page of this DocumentInfoFieldEntry.
        :rtype: float
        """
        return self._page

    @page.setter
    def page(self, page: float):
        """Sets the page of this DocumentInfoFieldEntry.

        The page that contains the field. Indices start at 0.  # noqa: E501

        :param page: The page of this DocumentInfoFieldEntry.
        :type page: float
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")  # noqa: E501

        self._page = page
