# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .. import util


class AuditLogEntry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, timestamp: str=None, data: object=None):  # noqa: E501
        """AuditLogEntry - a model defined in Swagger

        :param status: The status of this AuditLogEntry.  # noqa: E501
        :type status: str
        :param timestamp: The timestamp of this AuditLogEntry.  # noqa: E501
        :type timestamp: str
        :param data: The data of this AuditLogEntry.  # noqa: E501
        :type data: object
        """
        self.swagger_types = {
            'status': str,
            'timestamp': str,
            'data': object
        }

        self.attribute_map = {
            'status': 'status',
            'timestamp': 'timestamp',
            'data': 'data'
        }

        self._status = status
        self._timestamp = timestamp
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'AuditLogEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AuditLogEntry of this AuditLogEntry.  # noqa: E501
        :rtype: AuditLogEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this AuditLogEntry.

        The type of the last action that was carried out on the document.  # noqa: E501

        :return: The status of this AuditLogEntry.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this AuditLogEntry.

        The type of the last action that was carried out on the document.  # noqa: E501

        :param status: The status of this AuditLogEntry.
        :type status: str
        """
        allowed_values = ["created", "viewed", "stamp_failed", "stamp_success", "updated"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this AuditLogEntry.

        An ISO format timestamp indicating the date and time that the event occurred at.  # noqa: E501

        :return: The timestamp of this AuditLogEntry.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """Sets the timestamp of this AuditLogEntry.

        An ISO format timestamp indicating the date and time that the event occurred at.  # noqa: E501

        :param timestamp: The timestamp of this AuditLogEntry.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def data(self) -> object:
        """Gets the data of this AuditLogEntry.

        An object containing extra details about the status.  # noqa: E501

        :return: The data of this AuditLogEntry.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data: object):
        """Sets the data of this AuditLogEntry.

        An object containing extra details about the status.  # noqa: E501

        :param data: The data of this AuditLogEntry.
        :type data: object
        """

        self._data = data
