# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .document_info_field_entry import DocumentInfoFieldEntry  # noqa: F401,E501
from .document_info_page_entry import DocumentInfoPageEntry  # noqa: F401,E501
from .. import util


class DocumentInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, pages: List[DocumentInfoPageEntry]=None, fields: List[DocumentInfoFieldEntry]=None):  # noqa: E501
        """DocumentInfo - a model defined in Swagger

        :param pages: The pages of this DocumentInfo.  # noqa: E501
        :type pages: List[DocumentInfoPageEntry]
        :param fields: The fields of this DocumentInfo.  # noqa: E501
        :type fields: List[DocumentInfoFieldEntry]
        """
        self.swagger_types = {
            'pages': List[DocumentInfoPageEntry],
            'fields': List[DocumentInfoFieldEntry]
        }

        self.attribute_map = {
            'pages': 'pages',
            'fields': 'fields'
        }

        self._pages = pages
        self._fields = fields

    @classmethod
    def from_dict(cls, dikt) -> 'DocumentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DocumentInfo of this DocumentInfo.  # noqa: E501
        :rtype: DocumentInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pages(self) -> List[DocumentInfoPageEntry]:
        """Gets the pages of this DocumentInfo.

        Details about each page in the document  # noqa: E501

        :return: The pages of this DocumentInfo.
        :rtype: List[DocumentInfoPageEntry]
        """
        return self._pages

    @pages.setter
    def pages(self, pages: List[DocumentInfoPageEntry]):
        """Sets the pages of this DocumentInfo.

        Details about each page in the document  # noqa: E501

        :param pages: The pages of this DocumentInfo.
        :type pages: List[DocumentInfoPageEntry]
        """
        if pages is None:
            raise ValueError("Invalid value for `pages`, must not be `None`")  # noqa: E501

        self._pages = pages

    @property
    def fields(self) -> List[DocumentInfoFieldEntry]:
        """Gets the fields of this DocumentInfo.

        Details about each field within the document that is owned by the current user.  # noqa: E501

        :return: The fields of this DocumentInfo.
        :rtype: List[DocumentInfoFieldEntry]
        """
        return self._fields

    @fields.setter
    def fields(self, fields: List[DocumentInfoFieldEntry]):
        """Sets the fields of this DocumentInfo.

        Details about each field within the document that is owned by the current user.  # noqa: E501

        :param fields: The fields of this DocumentInfo.
        :type fields: List[DocumentInfoFieldEntry]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501

        self._fields = fields
